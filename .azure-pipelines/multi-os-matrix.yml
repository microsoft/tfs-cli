# Multi-OS/Node matrix pipeline for tfs-cli
trigger: none

variables:
- name: DEBUG_CLI_OUTPUT
  value: 'false'
- name: DEBUG_MOCKSERVER_OUTPUT
  value: 'false'
- name: TFX_TRACE
  value: ''

stages:
- stage: matrix_test
  displayName: Matrix Test
  jobs:
    - job: matrix
      displayName: Run tests on all Node/OS combinations
      strategy:
        matrix:
          windows_node16:
            imageName: 'windows-2022'
            nodeVersion: '16.x'
          windows_node20:
            imageName: 'windows-2022'
            nodeVersion: '20.x'
          ubuntu_node16:
            imageName: 'ubuntu-24.04'
            nodeVersion: '16.x'
          ubuntu_node20:
            imageName: 'ubuntu-24.04'
            nodeVersion: '20.x'
          macos_node16:
            imageName: 'macos-14'
            nodeVersion: '16.x'
          macos_node20:
            imageName: 'macos-14'
            nodeVersion: '20.x'
      pool:
        vmImage: $(imageName)
      steps:
        - checkout: self
          clean: true
        - task: UseNode@1
          displayName: Use Node $(nodeVersion)
          inputs:
            version: '$(nodeVersion)'
        - task: NpmAuthenticate@0
          inputs:
            workingFile: .npmrc
        - script: |
            if [[ "$(nodeVersion)" =~ ^(10|12|14|16|18) ]]; then
              npm i -g npm@8.19.4 --force
              npm --version
            else
              npm i -g npm@10 --force
              npm --version
            fi
          displayName: Use compatible npm version for Node (Linux/macOS)
          condition: ne( variables['Agent.OS'], 'Windows_NT' )
        - script: |
            if "%nodeVersion%" == "16.x" (
              npm i -g npm@8.19.4 --force
              npm --version
            ) else if "%nodeVersion%" == "20.x" (
              npm i -g npm@10 --force
              npm --version
            ) else (
              npm --version
            )
          displayName: Use compatible npm version for Node (Windows)
          condition: eq( variables['Agent.OS'], 'Windows_NT' )
        - script: npm ci
          displayName: npm ci
        - script: npm run build
          displayName: Build TFX CLI
        - script: |
            export DEBUG_CLI_OUTPUT="$DEBUG_CLI_OUTPUT"
            export DEBUG_MOCKSERVER_OUTPUT="$DEBUG_MOCKSERVER_OUTPUT"
            export TFX_TRACE="$TFX_TRACE"
            npm run test:ci
          displayName: Run Tests (Linux/macOS)
          condition: ne( variables['Agent.OS'], 'Windows_NT' )
          env:
            DEBUG_CLI_OUTPUT: $(DEBUG_CLI_OUTPUT)
            DEBUG_MOCKSERVER_OUTPUT: $(DEBUG_MOCKSERVER_OUTPUT)
            TFX_TRACE: $(TFX_TRACE)
        - script: |
            set DEBUG_CLI_OUTPUT=%DEBUG_CLI_OUTPUT%
            set DEBUG_MOCKSERVER_OUTPUT=%DEBUG_MOCKSERVER_OUTPUT%
            set TFX_TRACE=%TFX_TRACE%
            npm run test:ci
          displayName: Run Tests (Windows)
          condition: eq( variables['Agent.OS'], 'Windows_NT' )
          env:
            DEBUG_CLI_OUTPUT: $(DEBUG_CLI_OUTPUT)
            DEBUG_MOCKSERVER_OUTPUT: $(DEBUG_MOCKSERVER_OUTPUT)
            TFX_TRACE: $(TFX_TRACE)
        - task: PublishTestResults@2
          displayName: Publish Test Results
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'test-results.xml'
            failTaskOnFailedTests: true
            testRunTitle: 'TFX CLI Tests (Matrix)'
